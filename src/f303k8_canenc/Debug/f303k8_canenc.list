
f303k8_canenc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000000c  080040c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080040c0  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4b0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c70  00000000  00000000  0002d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  0002f160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  0002ff18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae44  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000adc6  00000000  00000000  0004ba5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3221  00000000  00000000  00056822  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  000f9ac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004048 	.word	0x08004048

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004048 	.word	0x08004048

080001c8 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 80001d6:	f107 010c 	add.w	r1, r7, #12
 80001da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001de:	2201      	movs	r2, #1
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <uart_putc+0x28>)
 80001e2:	f003 fbd1 	bl	8003988 <HAL_UART_Transmit>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200001e4 	.word	0x200001e4

080001f4 <Count2rpm>:
TIM_Encoder_InitTypeDef sConfig3 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig1 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig2 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig3 = { 0 };
int32_t rpm[3] = { 0 };
void Count2rpm() {
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	rpm[0] = TIM1->CNT - 30000;
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <Count2rpm+0x5c>)
 80001fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001fc:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000200:	3b30      	subs	r3, #48	; 0x30
 8000202:	461a      	mov	r2, r3
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <Count2rpm+0x60>)
 8000206:	601a      	str	r2, [r3, #0]
	rpm[1] = TIM2->CNT - 30000;
 8000208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800020e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000212:	3b30      	subs	r3, #48	; 0x30
 8000214:	461a      	mov	r2, r3
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <Count2rpm+0x60>)
 8000218:	605a      	str	r2, [r3, #4]
	rpm[2] = TIM3->CNT - 30000;
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <Count2rpm+0x64>)
 800021c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800021e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000222:	3b30      	subs	r3, #48	; 0x30
 8000224:	461a      	mov	r2, r3
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <Count2rpm+0x60>)
 8000228:	609a      	str	r2, [r3, #8]
	TIM1->CNT = 30000;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Count2rpm+0x5c>)
 800022c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000230:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 30000;
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	f247 5230 	movw	r2, #30000	; 0x7530
 800023a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 30000;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <Count2rpm+0x64>)
 800023e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40012c00 	.word	0x40012c00
 8000254:	200000c0 	.word	0x200000c0
 8000258:	40000400 	.word	0x40000400

0800025c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 8000262:	4b66      	ldr	r3, [pc, #408]	; (80003fc <main+0x1a0>)
 8000264:	4a66      	ldr	r2, [pc, #408]	; (8000400 <main+0x1a4>)
 8000266:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000268:	f000 fef8 	bl	800105c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800026c:	f000 f8e8 	bl	8000440 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000270:	f000 fac8 	bl	8000804 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000274:	f000 fa96 	bl	80007a4 <MX_USART2_UART_Init>
	MX_CAN_Init();
 8000278:	f000 f93c 	bl	80004f4 <MX_CAN_Init>
	MX_TIM1_Init();
 800027c:	f000 f970 	bl	8000560 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000280:	f000 f9c6 	bl	8000610 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000284:	f000 fa16 	bl	80006b4 <MX_TIM3_Init>
	MX_TIM16_Init();
 8000288:	f000 fa66 	bl	8000758 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 800028c:	495d      	ldr	r1, [pc, #372]	; (8000404 <main+0x1a8>)
 800028e:	485e      	ldr	r0, [pc, #376]	; (8000408 <main+0x1ac>)
 8000290:	f002 ff7e 	bl	8003190 <HAL_TIM_Encoder_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <main+0x42>
		Error_Handler();
 800029a:	f000 fad7 	bl	800084c <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800029e:	213c      	movs	r1, #60	; 0x3c
 80002a0:	4859      	ldr	r0, [pc, #356]	; (8000408 <main+0x1ac>)
 80002a2:	f003 f81b 	bl	80032dc <HAL_TIM_Encoder_Start>
	TIM1->CNT = 30000;
 80002a6:	4b59      	ldr	r3, [pc, #356]	; (800040c <main+0x1b0>)
 80002a8:	f247 5230 	movw	r2, #30000	; 0x7530
 80002ac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 80002ae:	4958      	ldr	r1, [pc, #352]	; (8000410 <main+0x1b4>)
 80002b0:	4858      	ldr	r0, [pc, #352]	; (8000414 <main+0x1b8>)
 80002b2:	f002 ff6d 	bl	8003190 <HAL_TIM_Encoder_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <main+0x64>
		Error_Handler();
 80002bc:	f000 fac6 	bl	800084c <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80002c0:	213c      	movs	r1, #60	; 0x3c
 80002c2:	4854      	ldr	r0, [pc, #336]	; (8000414 <main+0x1b8>)
 80002c4:	f003 f80a 	bl	80032dc <HAL_TIM_Encoder_Start>
	TIM2->CNT = 30000;
 80002c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002cc:	f247 5230 	movw	r2, #30000	; 0x7530
 80002d0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 80002d2:	4951      	ldr	r1, [pc, #324]	; (8000418 <main+0x1bc>)
 80002d4:	4851      	ldr	r0, [pc, #324]	; (800041c <main+0x1c0>)
 80002d6:	f002 ff5b 	bl	8003190 <HAL_TIM_Encoder_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <main+0x88>
		Error_Handler();
 80002e0:	f000 fab4 	bl	800084c <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002e4:	213c      	movs	r1, #60	; 0x3c
 80002e6:	484d      	ldr	r0, [pc, #308]	; (800041c <main+0x1c0>)
 80002e8:	f002 fff8 	bl	80032dc <HAL_TIM_Encoder_Start>
	TIM3->CNT = 30000;
 80002ec:	4b4c      	ldr	r3, [pc, #304]	; (8000420 <main+0x1c4>)
 80002ee:	f247 5230 	movw	r2, #30000	; 0x7530
 80002f2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim16);
 80002f4:	484b      	ldr	r0, [pc, #300]	; (8000424 <main+0x1c8>)
 80002f6:	f002 feef 	bl	80030d8 <HAL_TIM_Base_Start_IT>
	HAL_CAN_Start(&hcan);
 80002fa:	484b      	ldr	r0, [pc, #300]	; (8000428 <main+0x1cc>)
 80002fc:	f001 f831 	bl	8001362 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000300:	2102      	movs	r1, #2
 8000302:	4849      	ldr	r0, [pc, #292]	; (8000428 <main+0x1cc>)
 8000304:	f001 f981 	bl	800160a <HAL_CAN_ActivateNotification>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <main+0xb6>
			!= HAL_OK) {

		Error_Handler();
 800030e:	f000 fa9d 	bl	800084c <Error_Handler>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		TxHeader.StdId = 0x301;
 8000312:	4b46      	ldr	r3, [pc, #280]	; (800042c <main+0x1d0>)
 8000314:	f240 3201 	movw	r2, #769	; 0x301
 8000318:	601a      	str	r2, [r3, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 800031a:	4b44      	ldr	r3, [pc, #272]	; (800042c <main+0x1d0>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 8000320:	4b42      	ldr	r3, [pc, #264]	; (800042c <main+0x1d0>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = 8;
 8000326:	4b41      	ldr	r3, [pc, #260]	; (800042c <main+0x1d0>)
 8000328:	2208      	movs	r2, #8
 800032a:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 800032c:	4b3f      	ldr	r3, [pc, #252]	; (800042c <main+0x1d0>)
 800032e:	2200      	movs	r2, #0
 8000330:	751a      	strb	r2, [r3, #20]
		uint16_t txrpm[3]={
				rpm[0]+512,
 8000332:	4b3f      	ldr	r3, [pc, #252]	; (8000430 <main+0x1d4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	b29b      	uxth	r3, r3
 8000338:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800033c:	b29b      	uxth	r3, r3
		uint16_t txrpm[3]={
 800033e:	803b      	strh	r3, [r7, #0]
				rpm[1]+512,
 8000340:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <main+0x1d4>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	b29b      	uxth	r3, r3
 8000346:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800034a:	b29b      	uxth	r3, r3
		uint16_t txrpm[3]={
 800034c:	807b      	strh	r3, [r7, #2]
				rpm[2]+512
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <main+0x1d4>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	b29b      	uxth	r3, r3
 8000354:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000358:	b29b      	uxth	r3, r3
		uint16_t txrpm[3]={
 800035a:	80bb      	strh	r3, [r7, #4]
		};
//		xprintf("%d\t,%d\t,%d\r\n", txrpm[0], txrpm[1], txrpm[2]);
		//for(int i=0;i<8;i++)TxData[i]=0;
		TxData[0] = txrpm[0]&0xFF;
 800035c:	883b      	ldrh	r3, [r7, #0]
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b34      	ldr	r3, [pc, #208]	; (8000434 <main+0x1d8>)
 8000362:	701a      	strb	r2, [r3, #0]
		TxData[1] = ((txrpm[0]>>8)&0x3) + ((txrpm[1]<<2)&0xFC);
 8000364:	883b      	ldrh	r3, [r7, #0]
 8000366:	0a1b      	lsrs	r3, r3, #8
 8000368:	b29b      	uxth	r3, r3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0303 	and.w	r3, r3, #3
 8000370:	b2da      	uxtb	r2, r3
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	b2db      	uxtb	r3, r3
 8000378:	4413      	add	r3, r2
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <main+0x1d8>)
 800037e:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((txrpm[1]>>6)&0xF) + ((txrpm[2]<<4)&0xF0);
 8000380:	887b      	ldrh	r3, [r7, #2]
 8000382:	099b      	lsrs	r3, r3, #6
 8000384:	b29b      	uxth	r3, r3
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f003 030f 	and.w	r3, r3, #15
 800038c:	b2da      	uxtb	r2, r3
 800038e:	88bb      	ldrh	r3, [r7, #4]
 8000390:	011b      	lsls	r3, r3, #4
 8000392:	b2db      	uxtb	r3, r3
 8000394:	4413      	add	r3, r2
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b26      	ldr	r3, [pc, #152]	; (8000434 <main+0x1d8>)
 800039a:	709a      	strb	r2, [r3, #2]
		TxData[3] = (txrpm[2]>>4)&0x3F;
 800039c:	88bb      	ldrh	r3, [r7, #4]
 800039e:	091b      	lsrs	r3, r3, #4
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <main+0x1d8>)
 80003ac:	70da      	strb	r2, [r3, #3]
		xprintf("%d\t,%d\t,%d\t,%d\r\n", TxData[0], TxData[1], TxData[2], TxData[3]);
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <main+0x1d8>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	4619      	mov	r1, r3
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <main+0x1d8>)
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <main+0x1d8>)
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	4618      	mov	r0, r3
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <main+0x1d8>)
 80003c2:	78db      	ldrb	r3, [r3, #3]
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	4603      	mov	r3, r0
 80003c8:	481b      	ldr	r0, [pc, #108]	; (8000438 <main+0x1dc>)
 80003ca:	f000 fe0b 	bl	8000fe4 <xprintf>
		/* Request transmission */
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox)
 80003ce:	4b1b      	ldr	r3, [pc, #108]	; (800043c <main+0x1e0>)
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <main+0x1d8>)
 80003d2:	4916      	ldr	r1, [pc, #88]	; (800042c <main+0x1d0>)
 80003d4:	4814      	ldr	r0, [pc, #80]	; (8000428 <main+0x1cc>)
 80003d6:	f001 f808 	bl	80013ea <HAL_CAN_AddTxMessage>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <main+0x188>
				!= HAL_OK) {
			/* Transmission request Error */
			Error_Handler();
 80003e0:	f000 fa34 	bl	800084c <Error_Handler>
		}
		HAL_Delay(10);
 80003e4:	200a      	movs	r0, #10
 80003e6:	f000 fe9f 	bl	8001128 <HAL_Delay>
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 80003ea:	bf00      	nop
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <main+0x1cc>)
 80003ee:	f001 f8d7 	bl	80015a0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d1f9      	bne.n	80003ec <main+0x190>
	while (1) {
 80003f8:	e78b      	b.n	8000312 <main+0xb6>
 80003fa:	bf00      	nop
 80003fc:	200002d0 	.word	0x200002d0
 8000400:	080001c9 	.word	0x080001c9
 8000404:	20000030 	.word	0x20000030
 8000408:	20000148 	.word	0x20000148
 800040c:	40012c00 	.word	0x40012c00
 8000410:	20000054 	.word	0x20000054
 8000414:	20000198 	.word	0x20000198
 8000418:	20000078 	.word	0x20000078
 800041c:	200000fc 	.word	0x200000fc
 8000420:	40000400 	.word	0x40000400
 8000424:	20000280 	.word	0x20000280
 8000428:	200000d4 	.word	0x200000d4
 800042c:	20000268 	.word	0x20000268
 8000430:	200000c0 	.word	0x200000c0
 8000434:	20000028 	.word	0x20000028
 8000438:	08004060 	.word	0x08004060
 800043c:	20000194 	.word	0x20000194

08000440 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b096      	sub	sp, #88	; 0x58
 8000444:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800044a:	2228      	movs	r2, #40	; 0x28
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f003 fdf2 	bl	8004038 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000454:	f107 031c 	add.w	r3, r7, #28
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
 8000472:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000474:	2302      	movs	r3, #2
 8000476:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047c:	2310      	movs	r3, #16
 800047e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000480:	2302      	movs	r3, #2
 8000482:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000484:	2300      	movs	r3, #0
 8000486:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000488:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800048c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800048e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fb64 	bl	8001b60 <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x62>
		Error_Handler();
 800049e:	f000 f9d5 	bl	800084c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	2302      	movs	r3, #2
 80004a8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004b8:	f107 031c 	add.w	r3, r7, #28
 80004bc:	2102      	movs	r1, #2
 80004be:	4618      	mov	r0, r3
 80004c0:	f002 fa56 	bl	8002970 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x8e>
		Error_Handler();
 80004ca:	f000 f9bf 	bl	800084c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80004ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fc7e 	bl	8002ddc <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xaa>
		Error_Handler();
 80004e6:	f000 f9b1 	bl	800084c <Error_Handler>
	}
}
 80004ea:	bf00      	nop
 80004ec:	3758      	adds	r7, #88	; 0x58
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_CAN_Init+0x64>)
 80004fa:	4a18      	ldr	r2, [pc, #96]	; (800055c <MX_CAN_Init+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_CAN_Init+0x64>)
 8000500:	2202      	movs	r2, #2
 8000502:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_CAN_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_CAN_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_CAN_Init+0x64>)
 8000512:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000516:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_CAN_Init+0x64>)
 800051a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800051e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <MX_CAN_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_CAN_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <MX_CAN_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_CAN_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <MX_CAN_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_CAN_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_CAN_Init+0x64>)
 8000546:	f000 fe11 	bl	800116c <HAL_CAN_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_CAN_Init+0x60>
		Error_Handler();
 8000550:	f000 f97c 	bl	800084c <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000d4 	.word	0x200000d4
 800055c:	40006400 	.word	0x40006400

08000560 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
	/* USER CODE BEGIN TIM1_Init 2 */
	htim1.Instance = TIM1;
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_TIM1_Init+0xa0>)
 8000566:	4a27      	ldr	r2, [pc, #156]	; (8000604 <MX_TIM1_Init+0xa4>)
 8000568:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <MX_TIM1_Init+0xa0>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_TIM1_Init+0xa0>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_TIM1_Init+0xa0>)
 8000578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_TIM1_Init+0xa0>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_TIM1_Init+0xa0>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_TIM1_Init+0xa0>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
	sConfig1.EncoderMode = TIM_ENCODERMODE_TI1;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_TIM1_Init+0xa8>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
	sConfig1.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_TIM1_Init+0xa8>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
	sConfig1.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_TIM1_Init+0xa8>)
 800059e:	2201      	movs	r2, #1
 80005a0:	609a      	str	r2, [r3, #8]
	sConfig1.IC1Prescaler = TIM_ICPSC_DIV1;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_TIM1_Init+0xa8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
	sConfig1.IC1Filter = 0;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_TIM1_Init+0xa8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
	sConfig1.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_TIM1_Init+0xa8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
	sConfig1.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_TIM1_Init+0xa8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	619a      	str	r2, [r3, #24]
	sConfig1.IC2Prescaler = TIM_ICPSC_DIV1;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_TIM1_Init+0xa8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
	sConfig1.IC2Filter = 0;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_TIM1_Init+0xa8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 80005c6:	4910      	ldr	r1, [pc, #64]	; (8000608 <MX_TIM1_Init+0xa8>)
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <MX_TIM1_Init+0xa0>)
 80005ca:	f002 fde1 	bl	8003190 <HAL_TIM_Encoder_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM1_Init+0x78>
		Error_Handler();
 80005d4:	f000 f93a 	bl	800084c <Error_Handler>
	}
	sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_TIM1_Init+0xac>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	sMasterConfig1.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_TIM1_Init+0xac>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
	sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_TIM1_Init+0xac>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig1)
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <MX_TIM1_Init+0xac>)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_TIM1_Init+0xa0>)
 80005ee:	f003 f8f1 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM1_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80005f8:	f000 f928 	bl	800084c <Error_Handler>
	}
	/* USER CODE END TIM1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000148 	.word	0x20000148
 8000604:	40012c00 	.word	0x40012c00
 8000608:	20000030 	.word	0x20000030
 800060c:	2000009c 	.word	0x2000009c

08000610 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
	/* USER CODE BEGIN TIM2_Init 2 */
	htim2.Instance = TIM2;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_TIM2_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_TIM2_Init+0x98>)
 800062a:	f04f 32ff 	mov.w	r2, #4294967295
 800062e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
	sConfig2.EncoderMode = TIM_ENCODERMODE_TI1;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_TIM2_Init+0x9c>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
	sConfig2.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_TIM2_Init+0x9c>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
	sConfig2.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_TIM2_Init+0x9c>)
 800064a:	2201      	movs	r2, #1
 800064c:	609a      	str	r2, [r3, #8]
	sConfig2.IC1Prescaler = TIM_ICPSC_DIV1;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_TIM2_Init+0x9c>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
	sConfig2.IC1Filter = 0;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_TIM2_Init+0x9c>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
	sConfig2.IC2Polarity = TIM_ICPOLARITY_RISING;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_TIM2_Init+0x9c>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
	sConfig2.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_TIM2_Init+0x9c>)
 8000662:	2201      	movs	r2, #1
 8000664:	619a      	str	r2, [r3, #24]
	sConfig2.IC2Prescaler = TIM_ICPSC_DIV1;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_TIM2_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
	sConfig2.IC2Filter = 0;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_TIM2_Init+0x9c>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <MX_TIM2_Init+0x9c>)
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000676:	f002 fd8b 	bl	8003190 <HAL_TIM_Encoder_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x74>
		Error_Handler();
 8000680:	f000 f8e4 	bl	800084c <Error_Handler>
	}
	sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_TIM2_Init+0xa0>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
	sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_TIM2_Init+0xa0>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2)
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <MX_TIM2_Init+0xa0>)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000694:	f003 f89e 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800069e:	f000 f8d5 	bl	800084c <Error_Handler>
	}
	/* USER CODE END TIM2_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000198 	.word	0x20000198
 80006ac:	20000054 	.word	0x20000054
 80006b0:	200000a8 	.word	0x200000a8

080006b4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
	/* USER CODE BEGIN TIM3_Init 2 */
	htim3.Instance = TIM3;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_TIM3_Init+0x94>)
 80006ba:	4a24      	ldr	r2, [pc, #144]	; (800074c <MX_TIM3_Init+0x98>)
 80006bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_TIM3_Init+0x94>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_TIM3_Init+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_TIM3_Init+0x94>)
 80006cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_TIM3_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_TIM3_Init+0x94>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
	sConfig3.EncoderMode = TIM_ENCODERMODE_TI1;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_TIM3_Init+0x9c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
	sConfig3.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_TIM3_Init+0x9c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
	sConfig3.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_TIM3_Init+0x9c>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	609a      	str	r2, [r3, #8]
	sConfig3.IC1Prescaler = TIM_ICPSC_DIV1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_TIM3_Init+0x9c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
	sConfig3.IC1Filter = 0;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_TIM3_Init+0x9c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
	sConfig3.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_TIM3_Init+0x9c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
	sConfig3.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_TIM3_Init+0x9c>)
 8000704:	2201      	movs	r2, #1
 8000706:	619a      	str	r2, [r3, #24]
	sConfig3.IC2Prescaler = TIM_ICPSC_DIV1;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_TIM3_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
	sConfig3.IC2Filter = 0;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_TIM3_Init+0x9c>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 8000714:	490e      	ldr	r1, [pc, #56]	; (8000750 <MX_TIM3_Init+0x9c>)
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_TIM3_Init+0x94>)
 8000718:	f002 fd3a 	bl	8003190 <HAL_TIM_Encoder_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0x72>
		Error_Handler();
 8000722:	f000 f893 	bl	800084c <Error_Handler>
	}
	sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_TIM3_Init+0xa0>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
	sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_TIM3_Init+0xa0>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3)
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <MX_TIM3_Init+0xa0>)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_TIM3_Init+0x94>)
 8000736:	f003 f84d 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000740:	f000 f884 	bl	800084c <Error_Handler>
	}
	/* USER CODE END TIM3_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000fc 	.word	0x200000fc
 800074c:	40000400 	.word	0x40000400
 8000750:	20000078 	.word	0x20000078
 8000754:	200000b4 	.word	0x200000b4

08000758 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_TIM16_Init+0x44>)
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_TIM16_Init+0x48>)
 8000760:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 99;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_TIM16_Init+0x44>)
 8000764:	2263      	movs	r2, #99	; 0x63
 8000766:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_TIM16_Init+0x44>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_TIM16_Init+0x44>)
 8000770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000774:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_TIM16_Init+0x44>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_TIM16_Init+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_TIM16_Init+0x44>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_TIM16_Init+0x44>)
 800078a:	f002 fc4d 	bl	8003028 <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM16_Init+0x40>
		Error_Handler();
 8000794:	f000 f85a 	bl	800084c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000280 	.word	0x20000280
 80007a0:	40014400 	.word	0x40014400

080007a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e8:	f003 f880 	bl	80038ec <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007f2:	f000 f82b 	bl	800084c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001e4 	.word	0x200001e4
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_GPIO_Init+0x44>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <MX_GPIO_Init+0x44>)
 8000810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_GPIO_Init+0x44>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_GPIO_Init+0x44>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <MX_GPIO_Init+0x44>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_GPIO_Init+0x44>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_CAN_MspInit+0x80>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d129      	bne.n	800091a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_CAN_MspInit+0x84>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_CAN_MspInit+0x84>)
 80008cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_CAN_MspInit+0x84>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_CAN_MspInit+0x84>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <HAL_CAN_MspInit+0x84>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_CAN_MspInit+0x84>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000908:	2309      	movs	r3, #9
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f000 ffb1 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40006400 	.word	0x40006400
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <HAL_TIM_Encoder_MspInit+0x14c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d132      	bne.n	80009b4 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800094e:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000962:	623b      	str	r3, [r7, #32]
 8000964:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800097e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000990:	2306      	movs	r3, #6
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 ff6d 	bl	800187c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2019      	movs	r0, #25
 80009a8:	f000 ff31 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009ac:	2019      	movs	r0, #25
 80009ae:	f000 ff4a 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009b2:	e05c      	b.n	8000a6e <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009bc:	d129      	bne.n	8000a12 <HAL_TIM_Encoder_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	6153      	str	r3, [r2, #20]
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ee:	2303      	movs	r3, #3
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009fe:	2301      	movs	r3, #1
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 ff36 	bl	800187c <HAL_GPIO_Init>
}
 8000a10:	e02d      	b.n	8000a6e <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <HAL_TIM_Encoder_MspInit+0x154>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d128      	bne.n	8000a6e <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4a16      	ldr	r2, [pc, #88]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000a22:	f043 0302 	orr.w	r3, r3, #2
 8000a26:	61d3      	str	r3, [r2, #28]
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	6153      	str	r3, [r2, #20]
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x150>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000a4c:	2350      	movs	r3, #80	; 0x50
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 ff07 	bl	800187c <HAL_GPIO_Init>
}
 8000a6e:	bf00      	nop
 8000a70:	3738      	adds	r7, #56	; 0x38
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40000400 	.word	0x40000400

08000a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_TIM_Base_MspInit+0x44>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d113      	bne.n	8000abe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 feab 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ab8:	2019      	movs	r0, #25
 8000aba:	f000 fec4 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40014400 	.word	0x40014400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d129      	bne.n	8000b46 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b22:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b34:	2307      	movs	r3, #7
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fe9b 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40021000 	.word	0x40021000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 fa9c 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000bba:	f002 fc1c 	bl	80033f6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8000bc0:	f002 fc19 	bl	80033f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	Count2rpm();
 8000bc4:	f7ff fb16 	bl	80001f4 <Count2rpm>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000148 	.word	0x20000148
 8000bd0:	20000280 	.word	0x20000280

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b0a      	cmp	r3, #10
 8000c06:	d102      	bne.n	8000c0e <xputc+0x16>
 8000c08:	200d      	movs	r0, #13
 8000c0a:	f7ff fff5 	bl	8000bf8 <xputc>

	if (outptr) {		/* Destination is memory */
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <xputc+0x48>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <xputc+0x48>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	4908      	ldr	r1, [pc, #32]	; (8000c40 <xputc+0x48>)
 8000c1e:	600a      	str	r2, [r1, #0]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	701a      	strb	r2, [r3, #0]
		return;
 8000c24:	e008      	b.n	8000c38 <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <xputc+0x4c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d004      	beq.n	8000c38 <xputc+0x40>
		xfunc_out((unsigned char)c);
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <xputc+0x4c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	4610      	mov	r0, r2
 8000c36:	4798      	blx	r3
	}
}
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000cc 	.word	0x200000cc
 8000c44:	200002d0 	.word	0x200002d0

08000c48 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000c50:	e006      	b.n	8000c60 <xputs+0x18>
		xputc(*str++);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffcc 	bl	8000bf8 <xputc>
	while (*str) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f4      	bne.n	8000c52 <xputs+0xa>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	; 0x50
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 8000c86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 81a3 	beq.w	8000fd6 <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8000c90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c94:	2b25      	cmp	r3, #37	; 0x25
 8000c96:	d005      	beq.n	8000ca4 <xvprintf+0x34>
			xputc(c); continue;
 8000c98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffab 	bl	8000bf8 <xputc>
 8000ca2:	e197      	b.n	8000fd4 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8000ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8000cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cbc:	2b30      	cmp	r3, #48	; 0x30
 8000cbe:	d108      	bne.n	8000cd2 <xvprintf+0x62>
			f = 1; c = *fmt++;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cd0:	e00b      	b.n	8000cea <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cd6:	2b2d      	cmp	r3, #45	; 0x2d
 8000cd8:	d107      	bne.n	8000cea <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8000cea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cee:	2b2a      	cmp	r3, #42	; 0x2a
 8000cf0:	d126      	bne.n	8000d40 <xvprintf+0xd0>
			n = va_arg(arp, int);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	1d1a      	adds	r2, r3, #4
 8000cf6:	603a      	str	r2, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8000cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	da04      	bge.n	8000d0c <xvprintf+0x9c>
				n = 0 - n;
 8000d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d04:	425b      	negs	r3, r3
 8000d06:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8000d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d1c:	e018      	b.n	8000d50 <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8000d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d2e:	4413      	add	r3, r2
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8000d40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d44:	2b2f      	cmp	r3, #47	; 0x2f
 8000d46:	d903      	bls.n	8000d50 <xvprintf+0xe0>
 8000d48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d4c:	2b39      	cmp	r3, #57	; 0x39
 8000d4e:	d9e6      	bls.n	8000d1e <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 8000d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d54:	2b6c      	cmp	r3, #108	; 0x6c
 8000d56:	d003      	beq.n	8000d60 <xvprintf+0xf0>
 8000d58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d5c:	2b4c      	cmp	r3, #76	; 0x4c
 8000d5e:	d109      	bne.n	8000d74 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 8000d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8000d74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 812e 	beq.w	8000fda <xvprintf+0x36a>
		d = c;
 8000d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 8000d86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d8a:	2b60      	cmp	r3, #96	; 0x60
 8000d8c:	d904      	bls.n	8000d98 <xvprintf+0x128>
 8000d8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d92:	3b20      	subs	r3, #32
 8000d94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8000d98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d9c:	3b42      	subs	r3, #66	; 0x42
 8000d9e:	2b16      	cmp	r3, #22
 8000da0:	d873      	bhi.n	8000e8a <xvprintf+0x21a>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <xvprintf+0x138>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000e73 	.word	0x08000e73
 8000dac:	08000e61 	.word	0x08000e61
 8000db0:	08000e7f 	.word	0x08000e7f
 8000db4:	08000e8b 	.word	0x08000e8b
 8000db8:	08000e8b 	.word	0x08000e8b
 8000dbc:	08000e8b 	.word	0x08000e8b
 8000dc0:	08000e8b 	.word	0x08000e8b
 8000dc4:	08000e8b 	.word	0x08000e8b
 8000dc8:	08000e8b 	.word	0x08000e8b
 8000dcc:	08000e8b 	.word	0x08000e8b
 8000dd0:	08000e8b 	.word	0x08000e8b
 8000dd4:	08000e8b 	.word	0x08000e8b
 8000dd8:	08000e8b 	.word	0x08000e8b
 8000ddc:	08000e79 	.word	0x08000e79
 8000de0:	08000e8b 	.word	0x08000e8b
 8000de4:	08000e8b 	.word	0x08000e8b
 8000de8:	08000e8b 	.word	0x08000e8b
 8000dec:	08000e05 	.word	0x08000e05
 8000df0:	08000e8b 	.word	0x08000e8b
 8000df4:	08000e7f 	.word	0x08000e7f
 8000df8:	08000e8b 	.word	0x08000e8b
 8000dfc:	08000e8b 	.word	0x08000e8b
 8000e00:	08000e85 	.word	0x08000e85
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	1d1a      	adds	r2, r3, #4
 8000e08:	603a      	str	r2, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	647b      	str	r3, [r7, #68]	; 0x44
 8000e12:	e002      	b.n	8000e1a <xvprintf+0x1aa>
 8000e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e16:	3301      	adds	r3, #1
 8000e18:	647b      	str	r3, [r7, #68]	; 0x44
 8000e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f6      	bne.n	8000e14 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 8000e26:	e002      	b.n	8000e2e <xvprintf+0x1be>
 8000e28:	2020      	movs	r0, #32
 8000e2a:	f7ff fee5 	bl	8000bf8 <xputc>
 8000e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d105      	bne.n	8000e44 <xvprintf+0x1d4>
 8000e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	647a      	str	r2, [r7, #68]	; 0x44
 8000e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f1      	bhi.n	8000e28 <xvprintf+0x1b8>
			xputs(p);
 8000e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e46:	f7ff feff 	bl	8000c48 <xputs>
			while (j++ < w) xputc(' ');
 8000e4a:	e002      	b.n	8000e52 <xvprintf+0x1e2>
 8000e4c:	2020      	movs	r0, #32
 8000e4e:	f7ff fed3 	bl	8000bf8 <xputc>
 8000e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	647a      	str	r2, [r7, #68]	; 0x44
 8000e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d8f6      	bhi.n	8000e4c <xvprintf+0x1dc>
			continue;
 8000e5e:	e0b9      	b.n	8000fd4 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	1d1a      	adds	r2, r3, #4
 8000e64:	603a      	str	r2, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fec4 	bl	8000bf8 <xputc>
 8000e70:	e0b0      	b.n	8000fd4 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 8000e72:	2302      	movs	r3, #2
 8000e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e76:	e00e      	b.n	8000e96 <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e7c:	e00b      	b.n	8000e96 <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8000e7e:	230a      	movs	r3, #10
 8000e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e82:	e008      	b.n	8000e96 <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8000e84:	2310      	movs	r3, #16
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e88:	e005      	b.n	8000e96 <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8000e8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff feb2 	bl	8000bf8 <xputc>
 8000e94:	e09e      	b.n	8000fd4 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8000e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <xvprintf+0x23c>
			v = va_arg(arp, long);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	1d1a      	adds	r2, r3, #4
 8000ea4:	603a      	str	r2, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8000eaa:	e00d      	b.n	8000ec8 <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8000eac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000eb0:	2b44      	cmp	r3, #68	; 0x44
 8000eb2:	d104      	bne.n	8000ebe <xvprintf+0x24e>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	1d1a      	adds	r2, r3, #4
 8000eb8:	603a      	str	r2, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	e003      	b.n	8000ec6 <xvprintf+0x256>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	1d1a      	adds	r2, r3, #4
 8000ec2:	603a      	str	r2, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 8000ec8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000ecc:	2b44      	cmp	r3, #68	; 0x44
 8000ece:	d109      	bne.n	8000ee4 <xvprintf+0x274>
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da06      	bge.n	8000ee4 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 8000ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed8:	425b      	negs	r3, r3
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
 8000edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8000eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ef0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ef4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000ef6:	fb01 f202 	mul.w	r2, r1, r2
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8000f0a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	d90b      	bls.n	8000f2a <xvprintf+0x2ba>
 8000f12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f16:	2b78      	cmp	r3, #120	; 0x78
 8000f18:	d101      	bne.n	8000f1e <xvprintf+0x2ae>
 8000f1a:	2227      	movs	r2, #39	; 0x27
 8000f1c:	e000      	b.n	8000f20 <xvprintf+0x2b0>
 8000f1e:	2207      	movs	r2, #7
 8000f20:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f24:	4413      	add	r3, r2
 8000f26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 8000f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8000f30:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000f34:	3230      	adds	r2, #48	; 0x30
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000f3c:	440b      	add	r3, r1
 8000f3e:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <xvprintf+0x2de>
 8000f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f4a:	2b1f      	cmp	r3, #31
 8000f4c:	d9ce      	bls.n	8000eec <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 8000f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d008      	beq.n	8000f6a <xvprintf+0x2fa>
 8000f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	64ba      	str	r2, [r7, #72]	; 0x48
 8000f5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f62:	4413      	add	r3, r2
 8000f64:	222d      	movs	r2, #45	; 0x2d
 8000f66:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 8000f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8000f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <xvprintf+0x30c>
 8000f78:	2330      	movs	r3, #48	; 0x30
 8000f7a:	e000      	b.n	8000f7e <xvprintf+0x30e>
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 8000f82:	e004      	b.n	8000f8e <xvprintf+0x31e>
 8000f84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe35 	bl	8000bf8 <xputc>
 8000f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <xvprintf+0x334>
 8000f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	647a      	str	r2, [r7, #68]	; 0x44
 8000f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8ef      	bhi.n	8000f84 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 8000fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000faa:	f107 0208 	add.w	r2, r7, #8
 8000fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe1f 	bl	8000bf8 <xputc>
 8000fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f1      	bne.n	8000fa4 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 8000fc0:	e002      	b.n	8000fc8 <xvprintf+0x358>
 8000fc2:	2020      	movs	r0, #32
 8000fc4:	f7ff fe18 	bl	8000bf8 <xputc>
 8000fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	647a      	str	r2, [r7, #68]	; 0x44
 8000fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f6      	bhi.n	8000fc2 <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8000fd4:	e651      	b.n	8000c7a <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8000fd6:	bf00      	nop
 8000fd8:	e000      	b.n	8000fdc <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 8000fda:	bf00      	nop
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3750      	adds	r7, #80	; 0x50
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8000fe4:	b40f      	push	{r0, r1, r2, r3}
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	6938      	ldr	r0, [r7, #16]
 8000ff6:	f7ff fe3b 	bl	8000c70 <xvprintf>
	va_end(arp);
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001004:	b004      	add	sp, #16
 8001006:	4770      	bx	lr

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <LoopForever+0xe>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	; (8001054 <LoopForever+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001032:	f7ff fdcf 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f002 ffdb 	bl	8003ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff f90f 	bl	800025c <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001040:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800104c:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8001050:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001054:	200002d8 	.word	0x200002d8

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>
	...

0800105c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x28>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x28>)
 8001066:	f043 0310 	orr.w	r3, r3, #16
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 fbc3 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fbf0 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fbdb 	bl	8001862 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 fba3 	bl	800180e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200002d4 	.word	0x200002d4

08001110 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;  
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200002d4 	.word	0x200002d4

08001128 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_Delay+0x40>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0ed      	b.n	800135a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fb8a 	bl	80008a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0202 	bic.w	r2, r2, #2
 800119e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a0:	f7ff ffb6 	bl	8001110 <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011a6:	e012      	b.n	80011ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a8:	f7ff ffb2 	bl	8001110 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d90b      	bls.n	80011ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2205      	movs	r2, #5
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0c5      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e5      	bne.n	80011a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff ff90 	bl	8001110 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011f2:	e012      	b.n	800121a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f4:	f7ff ff8c 	bl	8001110 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b0a      	cmp	r3, #10
 8001200:	d90b      	bls.n	800121a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e09f      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0e5      	beq.n	80011f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7e1b      	ldrb	r3, [r3, #24]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e007      	b.n	8001252 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7e5b      	ldrb	r3, [r3, #25]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d108      	bne.n	800126c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e007      	b.n	800127c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800127a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e9b      	ldrb	r3, [r3, #26]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e007      	b.n	80012a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0220 	bic.w	r2, r2, #32
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7edb      	ldrb	r3, [r3, #27]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0210 	bic.w	r2, r2, #16
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e007      	b.n	80012d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0210 	orr.w	r2, r2, #16
 80012ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7f1b      	ldrb	r3, [r3, #28]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e007      	b.n	80012fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0208 	bic.w	r2, r2, #8
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7f5b      	ldrb	r3, [r3, #29]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e007      	b.n	8001324 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	ea42 0103 	orr.w	r1, r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d12e      	bne.n	80013d4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2202      	movs	r2, #2
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800138e:	f7ff febf 	bl	8001110 <HAL_GetTick>
 8001392:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001394:	e012      	b.n	80013bc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001396:	f7ff febb 	bl	8001110 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b0a      	cmp	r3, #10
 80013a2:	d90b      	bls.n	80013bc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2205      	movs	r2, #5
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e012      	b.n	80013e2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e5      	bne.n	8001396 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e006      	b.n	80013e2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b089      	sub	sp, #36	; 0x24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <HAL_CAN_AddTxMessage+0x2c>
 800140e:	7ffb      	ldrb	r3, [r7, #31]
 8001410:	2b02      	cmp	r3, #2
 8001412:	f040 80b8 	bne.w	8001586 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10a      	bne.n	8001436 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a0 	beq.w	8001576 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	0e1b      	lsrs	r3, r3, #24
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d907      	bls.n	8001456 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e09e      	b.n	8001594 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001456:	2201      	movs	r2, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10d      	bne.n	8001484 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	6809      	ldr	r1, [r1, #0]
 8001476:	431a      	orrs	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3318      	adds	r3, #24
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	440b      	add	r3, r1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e00f      	b.n	80014a4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800148e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001498:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3318      	adds	r3, #24
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	440b      	add	r3, r1
 80014a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6819      	ldr	r1, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3318      	adds	r3, #24
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	7d1b      	ldrb	r3, [r3, #20]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d111      	bne.n	80014e4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3318      	adds	r3, #24
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	4413      	add	r3, r2
 80014cc:	3304      	adds	r3, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	6811      	ldr	r1, [r2, #0]
 80014d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3318      	adds	r3, #24
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	3304      	adds	r3, #4
 80014e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3307      	adds	r3, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	061a      	lsls	r2, r3, #24
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3306      	adds	r3, #6
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3305      	adds	r3, #5
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	4313      	orrs	r3, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	3204      	adds	r2, #4
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	4610      	mov	r0, r2
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	ea43 0200 	orr.w	r2, r3, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	440b      	add	r3, r1
 8001516:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800151a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3303      	adds	r3, #3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	061a      	lsls	r2, r3, #24
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3302      	adds	r3, #2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3301      	adds	r3, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	4313      	orrs	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	4610      	mov	r0, r2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	6811      	ldr	r1, [r2, #0]
 8001542:	ea43 0200 	orr.w	r2, r3, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	440b      	add	r3, r1
 800154c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001550:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3318      	adds	r3, #24
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4413      	add	r3, r2
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6811      	ldr	r1, [r2, #0]
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3318      	adds	r3, #24
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	440b      	add	r3, r1
 8001570:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e00e      	b.n	8001594 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e006      	b.n	8001594 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
  }
}
 8001594:	4618      	mov	r0, r3
 8001596:	3724      	adds	r7, #36	; 0x24
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d002      	beq.n	80015c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d11d      	bne.n	80015fc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3301      	adds	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80015fc:	68fb      	ldr	r3, [r7, #12]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d002      	beq.n	8001628 <HAL_CAN_ActivateNotification+0x1e>
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d109      	bne.n	800163c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6959      	ldr	r1, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e006      	b.n	800164a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
  }
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	; (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	; (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	; 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff29 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff3e 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff8e 	bl	800174c <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff31 	bl	80016bc <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa2 	bl	80017b4 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e14e      	b.n	8001b2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8140 	beq.w	8001b24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d00b      	beq.n	80018c4 <HAL_GPIO_Init+0x48>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b8:	2b11      	cmp	r3, #17
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b12      	cmp	r3, #18
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0xea>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b12      	cmp	r3, #18
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 809a 	beq.w	8001b24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <HAL_GPIO_Init+0x2cc>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a54      	ldr	r2, [pc, #336]	; (8001b48 <HAL_GPIO_Init+0x2cc>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x2cc>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a08:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a32:	d013      	beq.n	8001a5c <HAL_GPIO_Init+0x1e0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <HAL_GPIO_Init+0x2d4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d00d      	beq.n	8001a58 <HAL_GPIO_Init+0x1dc>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a45      	ldr	r2, [pc, #276]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0x1d8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <HAL_GPIO_Init+0x2dc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_GPIO_Init+0x1d4>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a50:	2305      	movs	r3, #5
 8001a52:	e004      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a6e:	4937      	ldr	r1, [pc, #220]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f47f aea9 	bne.w	800188c <HAL_GPIO_Init+0x10>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	48000400 	.word	0x48000400
 8001b54:	48000800 	.word	0x48000800
 8001b58:	48000c00 	.word	0x48000c00
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f000 bef4 	b.w	8002962 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 816a 	beq.w	8001e5e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b8a:	4bb3      	ldr	r3, [pc, #716]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d00c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b96:	4bb0      	ldr	r3, [pc, #704]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d159      	bne.n	8001c56 <HAL_RCC_OscConfig+0xf6>
 8001ba2:	4bad      	ldr	r3, [pc, #692]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d152      	bne.n	8001c56 <HAL_RCC_OscConfig+0xf6>
 8001bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bc4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0x82>
 8001bdc:	4b9e      	ldr	r3, [pc, #632]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0xae>
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bfe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c0a:	4b93      	ldr	r3, [pc, #588]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c12:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c16:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c1a:	fa92 f2a2 	rbit	r2, r2
 8001c1e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c22:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f042 0220 	orr.w	r2, r2, #32
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f002 021f 	and.w	r2, r2, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 810c 	beq.w	8001e5c <HAL_RCC_OscConfig+0x2fc>
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8106 	bne.w	8001e5c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f000 be86 	b.w	8002962 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x110>
 8001c62:	4b7d      	ldr	r3, [pc, #500]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7c      	ldr	r2, [pc, #496]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e030      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x134>
 8001c7a:	4b77      	ldr	r3, [pc, #476]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a76      	ldr	r2, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b74      	ldr	r3, [pc, #464]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a73      	ldr	r2, [pc, #460]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x15a>
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6c      	ldr	r2, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a69      	ldr	r2, [pc, #420]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001cba:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a63      	ldr	r2, [pc, #396]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cd2:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f023 020f 	bic.w	r2, r3, #15
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	495d      	ldr	r1, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d059      	beq.n	8001da4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fa0e 	bl	8001110 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fa09 	bl	8001110 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d902      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	f000 be29 	b.w	8002962 <HAL_RCC_OscConfig+0xe02>
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d24:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0x1e2>
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x20e>
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d5e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d72:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d7a:	fa92 f2a2 	rbit	r2, r2
 8001d7e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d82:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f002 021f 	and.w	r2, r2, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0ab      	beq.n	8001cfa <HAL_RCC_OscConfig+0x19a>
 8001da2:	e05c      	b.n	8001e5e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f9b4 	bl	8001110 <HAL_GetTick>
 8001da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dae:	f7ff f9af 	bl	8001110 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d902      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	f000 bdcf 	b.w	8002962 <HAL_RCC_OscConfig+0xe02>
 8001dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001dd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_OscConfig+0x296>
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x2c2>
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e12:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_RCC_OscConfig+0x2f8>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e26:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e2e:	fa92 f2a2 	rbit	r2, r2
 8001e32:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e36:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e3a:	fab2 f282 	clz	r2, r2
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f042 0220 	orr.w	r2, r2, #32
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ab      	bne.n	8001dae <HAL_RCC_OscConfig+0x24e>
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_OscConfig+0x2fe>
 8001e58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 816f 	beq.w	800214c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e6e:	4bd0      	ldr	r3, [pc, #832]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e7a:	4bcd      	ldr	r3, [pc, #820]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d16c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x400>
 8001e86:	4bca      	ldr	r3, [pc, #808]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d166      	bne.n	8001f60 <HAL_RCC_OscConfig+0x400>
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ea4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x362>
 8001ebc:	4bbc      	ldr	r3, [pc, #752]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	e013      	b.n	8001eea <HAL_RCC_OscConfig+0x38a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001eda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ee6:	4bb2      	ldr	r3, [pc, #712]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2202      	movs	r2, #2
 8001eec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ef0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ef4:	fa92 f2a2 	rbit	r2, r2
 8001ef8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001efc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f00:	fab2 f282 	clz	r2, r2
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f042 0220 	orr.w	r2, r2, #32
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f002 021f 	and.w	r2, r2, #31
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f000 bd1b 	b.w	8002962 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4ba0      	ldr	r3, [pc, #640]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	21f8      	movs	r1, #248	; 0xf8
 8001f3c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f44:	fa91 f1a1 	rbit	r1, r1
 8001f48:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f4c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f50:	fab1 f181 	clz	r1, r1
 8001f54:	b2c9      	uxtb	r1, r1
 8001f56:	408b      	lsls	r3, r1
 8001f58:	4995      	ldr	r1, [pc, #596]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e0f5      	b.n	800214c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8085 	beq.w	8002076 <HAL_RCC_OscConfig+0x516>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	461a      	mov	r2, r3
 8001f94:	2301      	movs	r3, #1
 8001f96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff f8ba 	bl	8001110 <HAL_GetTick>
 8001f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff f8b5 	bl	8001110 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d902      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f000 bcd5 	b.w	8002962 <HAL_RCC_OscConfig+0xe02>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x488>
 8001fe2:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e013      	b.n	8002010 <HAL_RCC_OscConfig+0x4b0>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002000:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800200c:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2202      	movs	r2, #2
 8002012:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002016:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800201a:	fa92 f2a2 	rbit	r2, r2
 800201e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002022:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002026:	fab2 f282 	clz	r2, r2
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f042 0220 	orr.w	r2, r2, #32
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f002 021f 	and.w	r2, r2, #31
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0af      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	21f8      	movs	r1, #248	; 0xf8
 8002052:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800205a:	fa91 f1a1 	rbit	r1, r1
 800205e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002062:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002066:	fab1 f181 	clz	r1, r1
 800206a:	b2c9      	uxtb	r1, r1
 800206c:	408b      	lsls	r3, r1
 800206e:	4950      	ldr	r1, [pc, #320]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
 8002074:	e06a      	b.n	800214c <HAL_RCC_OscConfig+0x5ec>
 8002076:	2301      	movs	r3, #1
 8002078:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002088:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002096:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2300      	movs	r3, #0
 80020a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff f835 	bl	8001110 <HAL_GetTick>
 80020a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff f830 	bl	8001110 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d902      	bls.n	80020c2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	f000 bc50 	b.w	8002962 <HAL_RCC_OscConfig+0xe02>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x592>
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0x5ba>
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800210a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x650>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2202      	movs	r2, #2
 800211c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002120:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800212c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1af      	bne.n	80020ac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80da 	beq.w	8002310 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d069      	beq.n	800223a <HAL_RCC_OscConfig+0x6da>
 8002166:	2301      	movs	r3, #1
 8002168:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x654>)
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	461a      	mov	r2, r3
 800218c:	2301      	movs	r3, #1
 800218e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe ffbe 	bl	8001110 <HAL_GetTick>
 8002194:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002198:	e00e      	b.n	80021b8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219a:	f7fe ffb9 	bl	8001110 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d906      	bls.n	80021b8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e3d9      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	10908120 	.word	0x10908120
 80021b8:	2302      	movs	r3, #2
 80021ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021ce:	2202      	movs	r2, #2
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021e6:	2202      	movs	r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4ba5      	ldr	r3, [pc, #660]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80021fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002202:	2102      	movs	r1, #2
 8002204:	6019      	str	r1, [r3, #0]
 8002206:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f1a3 	rbit	r1, r3
 8002210:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002214:	6019      	str	r1, [r3, #0]
  return result;
 8002216:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0b0      	beq.n	800219a <HAL_RCC_OscConfig+0x63a>
 8002238:	e06a      	b.n	8002310 <HAL_RCC_OscConfig+0x7b0>
 800223a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f2a3 	rbit	r2, r3
 800224c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002250:	601a      	str	r2, [r3, #0]
  return result;
 8002252:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002256:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <HAL_RCC_OscConfig+0x934>)
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	461a      	mov	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7fe ff50 	bl	8001110 <HAL_GetTick>
 8002270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	e009      	b.n	800228a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002276:	f7fe ff4b 	bl	8001110 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e36b      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
 800228a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800228e:	2202      	movs	r2, #2
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	fa93 f2a3 	rbit	r2, r3
 800229c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80022d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022da:	2102      	movs	r1, #2
 80022dc:	6019      	str	r1, [r3, #0]
 80022de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f1a3 	rbit	r1, r3
 80022e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022ec:	6019      	str	r1, [r3, #0]
  return result;
 80022ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1b2      	bne.n	8002276 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8158 	beq.w	80025d0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b57      	ldr	r3, [pc, #348]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a56      	ldr	r2, [pc, #344]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b54      	ldr	r3, [pc, #336]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_OscConfig+0x938>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11a      	bne.n	800239a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002364:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x938>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <HAL_RCC_OscConfig+0x938>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002370:	f7fe fece 	bl	8001110 <HAL_GetTick>
 8002374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e009      	b.n	800238e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe fec9 	bl	8001110 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e2e9      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_RCC_OscConfig+0x938>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0ef      	beq.n	800237a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x852>
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a39      	ldr	r2, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e02f      	b.n	8002412 <HAL_RCC_OscConfig+0x8b2>
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x876>
 80023bc:	4b34      	ldr	r3, [pc, #208]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a33      	ldr	r2, [pc, #204]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a30      	ldr	r2, [pc, #192]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023ce:	f023 0304 	bic.w	r3, r3, #4
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e01d      	b.n	8002412 <HAL_RCC_OscConfig+0x8b2>
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x89a>
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x8b2>
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d06b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe fe78 	bl	8001110 <HAL_GetTick>
 8002420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fe73 	bl	8001110 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e291      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
 800243e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002442:	2202      	movs	r2, #2
 8002444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800245a:	2202      	movs	r2, #2
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800246c:	601a      	str	r2, [r3, #0]
  return result;
 800246e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002472:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d109      	bne.n	800249c <HAL_RCC_OscConfig+0x93c>
 8002488:	4b01      	ldr	r3, [pc, #4]	; (8002490 <HAL_RCC_OscConfig+0x930>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x958>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	10908120 	.word	0x10908120
 8002498:	40007000 	.word	0x40007000
 800249c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024a0:	2202      	movs	r2, #2
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	4bbb      	ldr	r3, [pc, #748]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024bc:	2102      	movs	r1, #2
 80024be:	6011      	str	r1, [r2, #0]
 80024c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	fa92 f1a2 	rbit	r1, r2
 80024ca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024ce:	6011      	str	r1, [r2, #0]
  return result;
 80024d0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d099      	beq.n	8002426 <HAL_RCC_OscConfig+0x8c6>
 80024f2:	e063      	b.n	80025bc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fe0c 	bl	8001110 <HAL_GetTick>
 80024f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fe07 	bl	8001110 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e225      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
 8002516:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002544:	601a      	str	r2, [r3, #0]
  return result;
 8002546:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800254a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d102      	bne.n	8002566 <HAL_RCC_OscConfig+0xa06>
 8002560:	4b90      	ldr	r3, [pc, #576]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	e00d      	b.n	8002582 <HAL_RCC_OscConfig+0xa22>
 8002566:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4b89      	ldr	r3, [pc, #548]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002586:	2102      	movs	r1, #2
 8002588:	6011      	str	r1, [r2, #0]
 800258a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fa92 f1a2 	rbit	r1, r2
 8002594:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002598:	6011      	str	r1, [r2, #0]
  return result;
 800259a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	fab2 f282 	clz	r2, r2
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	f002 021f 	and.w	r2, r2, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f202 	lsl.w	r2, r1, r2
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1a0      	bne.n	80024fe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b77      	ldr	r3, [pc, #476]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a76      	ldr	r2, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 81c2 	beq.w	8002960 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025dc:	4b71      	ldr	r3, [pc, #452]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	f000 819c 	beq.w	8002922 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f040 8114 	bne.w	800281e <HAL_RCC_OscConfig+0xcbe>
 80025f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fa93 f2a3 	rbit	r2, r3
 800260a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800260e:	601a      	str	r2, [r3, #0]
  return result;
 8002610:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002614:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	461a      	mov	r2, r3
 8002628:	2300      	movs	r3, #0
 800262a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe fd70 	bl	8001110 <HAL_GetTick>
 8002630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	e009      	b.n	800264a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fd6b 	bl	8001110 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e18b      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
 800264a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800264e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002662:	601a      	str	r2, [r3, #0]
  return result;
 8002664:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002668:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0xb24>
 800267e:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e01b      	b.n	80026bc <HAL_RCC_OscConfig+0xb5c>
 8002684:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c4:	6011      	str	r1, [r2, #0]
 80026c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	fa92 f1a2 	rbit	r1, r2
 80026d0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026d4:	6011      	str	r1, [r2, #0]
  return result;
 80026d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	f042 0220 	orr.w	r2, r2, #32
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f002 021f 	and.w	r2, r2, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d19e      	bne.n	8002636 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	430b      	orrs	r3, r1
 800270e:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	fa93 f2a3 	rbit	r2, r3
 8002728:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800272c:	601a      	str	r2, [r3, #0]
  return result;
 800272e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002732:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fce1 	bl	8001110 <HAL_GetTick>
 800274e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002752:	e009      	b.n	8002768 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fcdc 	bl	8001110 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0fc      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
 8002768:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800276c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0xc48>
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e01e      	b.n	80027e0 <HAL_RCC_OscConfig+0xc80>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_OscConfig+0xe0c>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fa92 f1a2 	rbit	r1, r2
 80027f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80027f8:	6011      	str	r1, [r2, #0]
  return result;
 80027fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	fab2 f282 	clz	r2, r2
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f042 0220 	orr.w	r2, r2, #32
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f002 021f 	and.w	r2, r2, #31
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d09b      	beq.n	8002754 <HAL_RCC_OscConfig+0xbf4>
 800281c:	e0a0      	b.n	8002960 <HAL_RCC_OscConfig+0xe00>
 800281e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002822:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002836:	601a      	str	r2, [r3, #0]
  return result;
 8002838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fc5c 	bl	8001110 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fc57 	bl	8001110 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e077      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
 8002872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288a:	601a      	str	r2, [r3, #0]
  return result;
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_OscConfig+0xd4c>
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_RCC_OscConfig+0xe0c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0xd84>
 80028ac:	f107 0320 	add.w	r3, r7, #32
 80028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f107 0318 	add.w	r3, r7, #24
 80028ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f107 0318 	add.w	r3, r7, #24
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_RCC_OscConfig+0xe0c>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f107 0210 	add.w	r2, r7, #16
 80028e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ec:	6011      	str	r1, [r2, #0]
 80028ee:	f107 0210 	add.w	r2, r7, #16
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	fa92 f1a2 	rbit	r1, r2
 80028f8:	f107 020c 	add.w	r2, r7, #12
 80028fc:	6011      	str	r1, [r2, #0]
  return result;
 80028fe:	f107 020c 	add.w	r2, r7, #12
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d19e      	bne.n	800285e <HAL_RCC_OscConfig+0xcfe>
 8002920:	e01e      	b.n	8002960 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e018      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_RCC_OscConfig+0xe0c>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002938:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800293c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	429a      	cmp	r2, r3
 8002948:	d108      	bne.n	800295c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800294a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800294e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b09e      	sub	sp, #120	; 0x78
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e162      	b.n	8002c4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b90      	ldr	r3, [pc, #576]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b8d      	ldr	r3, [pc, #564]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	498b      	ldr	r1, [pc, #556]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e14a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b82      	ldr	r3, [pc, #520]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	497f      	ldr	r1, [pc, #508]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80dc 	beq.w	8002b9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d13c      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xf6>
 80029ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xa6>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	e00f      	b.n	8002a36 <HAL_RCC_ClockConfig+0xc6>
 8002a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	667b      	str	r3, [r7, #100]	; 0x64
 8002a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a28:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a46:	fab2 f282 	clz	r2, r2
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f042 0220 	orr.w	r2, r2, #32
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	f002 021f 	and.w	r2, r2, #31
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d17b      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0f3      	b.n	8002c4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d13c      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x178>
 8002a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x128>
 8002a92:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	e00f      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
 8002a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8002aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002abc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac0:	fa92 f2a2 	rbit	r2, r2
 8002ac4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac8:	fab2 f282 	clz	r2, r2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d13a      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b2      	b.n	8002c4e <HAL_RCC_ClockConfig+0x2de>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x1a0>
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e00d      	b.n	8002b2c <HAL_RCC_ClockConfig+0x1bc>
 8002b10:	2302      	movs	r3, #2
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	623b      	str	r3, [r7, #32]
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	61ba      	str	r2, [r7, #24]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	fa92 f2a2 	rbit	r2, r2
 8002b36:	617a      	str	r2, [r7, #20]
  return result;
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	fab2 f282 	clz	r2, r2
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f042 0220 	orr.w	r2, r2, #32
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f002 021f 	and.w	r2, r2, #31
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e079      	b.n	8002c4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	491a      	ldr	r1, [pc, #104]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fad0 	bl	8001110 <HAL_GetTick>
 8002b70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe facc 	bl	8001110 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e061      	b.n	8002c4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d214      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0207 	bic.w	r2, r3, #7
 8002bb2:	4906      	ldr	r1, [pc, #24]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e040      	b.n	8002c4e <HAL_RCC_ClockConfig+0x2de>
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_RCC_ClockConfig+0x2e8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	491a      	ldr	r1, [pc, #104]	; (8002c58 <HAL_RCC_ClockConfig+0x2e8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCC_ClockConfig+0x2e8>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4912      	ldr	r1, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c12:	f000 f829 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c16:	4601      	mov	r1, r0
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c20:	22f0      	movs	r2, #240	; 0xf0
 8002c22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	40d3      	lsrs	r3, r2
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x2ec>)
 8002c38:	5cd3      	ldrb	r3, [r2, r3]
 8002c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c3e:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_RCC_ClockConfig+0x2f0>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCC_ClockConfig+0x2f4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fa1e 	bl	8001088 <HAL_InitTick>
  
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3778      	adds	r7, #120	; 0x78
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08004074 	.word	0x08004074
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000004 	.word	0x20000004

08002c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x30>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x36>
 8002c96:	e03c      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c9a:	623b      	str	r3, [r7, #32]
      break;
 8002c9c:	e03c      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ca4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ca8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	fa92 f2a2 	rbit	r2, r2
 8002cb0:	607a      	str	r2, [r7, #4]
  return result;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	fab2 f282 	clz	r2, r2
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	40d3      	lsrs	r3, r2
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	220f      	movs	r2, #15
 8002ccc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	fa92 f2a2 	rbit	r2, r2
 8002cd4:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	40d3      	lsrs	r3, r2
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	e004      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	623b      	str	r3, [r7, #32]
      break;
 8002d10:	e002      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d14:	623b      	str	r3, [r7, #32]
      break;
 8002d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d18:	6a3b      	ldr	r3, [r7, #32]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	372c      	adds	r7, #44	; 0x2c
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	007a1200 	.word	0x007a1200
 8002d30:	0800408c 	.word	0x0800408c
 8002d34:	0800409c 	.word	0x0800409c
 8002d38:	003d0900 	.word	0x003d0900

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000000 	.word	0x20000000

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d5a:	f7ff ffef 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5e:	4601      	mov	r1, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	fa92 f2a2 	rbit	r2, r2
 8002d74:	603a      	str	r2, [r7, #0]
  return result;
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	40d3      	lsrs	r3, r2
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08004084 	.word	0x08004084

08002d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d9e:	f7ff ffcd 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002da2:	4601      	mov	r1, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002dac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002db0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	fa92 f2a2 	rbit	r2, r2
 8002db8:	603a      	str	r2, [r7, #0]
  return result;
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	fab2 f282 	clz	r2, r2
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	40d3      	lsrs	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08004084 	.word	0x08004084

08002ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b092      	sub	sp, #72	; 0x48
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80cd 	beq.w	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e00:	4b86      	ldr	r3, [pc, #536]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10e      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	4b83      	ldr	r3, [pc, #524]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	4a82      	ldr	r2, [pc, #520]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e16:	61d3      	str	r3, [r2, #28]
 8002e18:	4b80      	ldr	r3, [pc, #512]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b7a      	ldr	r3, [pc, #488]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a79      	ldr	r2, [pc, #484]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe f965 	bl	8001110 <HAL_GetTick>
 8002e46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe f961 	bl	8001110 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0db      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e68:	4b6c      	ldr	r3, [pc, #432]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d07d      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d076      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e86:	4b65      	ldr	r3, [pc, #404]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b55      	ldr	r3, [pc, #340]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ed8:	4a50      	ldr	r2, [pc, #320]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002edc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d045      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe f912 	bl	8001110 <HAL_GetTick>
 8002eec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe f90e 	bl	8001110 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e086      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002f06:	2302      	movs	r3, #2
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	2302      	movs	r3, #2
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	61fb      	str	r3, [r7, #28]
  return result;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d102      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f34:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	e007      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	613a      	str	r2, [r7, #16]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	fa92 f2a2 	rbit	r2, r2
 8002f54:	60fa      	str	r2, [r7, #12]
  return result;
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	f002 021f 	and.w	r2, r2, #31
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0bd      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4926      	ldr	r1, [pc, #152]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	491a      	ldr	r1, [pc, #104]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	f023 0210 	bic.w	r2, r3, #16
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4912      	ldr	r1, [pc, #72]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	490b      	ldr	r1, [pc, #44]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	4903      	ldr	r1, [pc, #12]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800300e:	4313      	orrs	r3, r2
 8003010:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3748      	adds	r7, #72	; 0x48
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	40007000 	.word	0x40007000
 8003024:	10908100 	.word	0x10908100

08003028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e049      	b.n	80030ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fd fd18 	bl	8000a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f000 fb16 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d001      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e040      	b.n	8003172 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_TIM_Base_Start_IT+0xa8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x58>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d009      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x58>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_TIM_Base_Start_IT+0xac>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x58>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_TIM_Base_Start_IT+0xb0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d115      	bne.n	800315c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_TIM_Base_Start_IT+0xb4>)
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d015      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x96>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d011      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	e008      	b.n	800316e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e000      	b.n	8003170 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40000400 	.word	0x40000400
 8003188:	40014000 	.word	0x40014000
 800318c:	00010007 	.word	0x00010007

08003190 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e097      	b.n	80032d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd fbb7 	bl	800092c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80031d4:	f023 0307 	bic.w	r3, r3, #7
 80031d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f000 fa57 	bl	8003698 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	4313      	orrs	r3, r2
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003230:	f023 030c 	bic.w	r3, r3, #12
 8003234:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800323c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	4313      	orrs	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	011a      	lsls	r2, r3, #4
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	031b      	lsls	r3, r3, #12
 8003260:	4313      	orrs	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4313      	orrs	r3, r2
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003304:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003312:	7b7b      	ldrb	r3, [r7, #13]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d001      	beq.n	800331c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e068      	b.n	80033ee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332c:	e031      	b.n	8003392 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d110      	bne.n	8003356 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d102      	bne.n	8003340 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800333a:	7b3b      	ldrb	r3, [r7, #12]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e054      	b.n	80033ee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003354:	e01d      	b.n	8003392 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d108      	bne.n	800336e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800335c:	7bbb      	ldrb	r3, [r7, #14]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003362:	7b7b      	ldrb	r3, [r7, #13]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003368:	7b3b      	ldrb	r3, [r7, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e03d      	b.n	80033ee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_TIM_Encoder_Start+0xc2>
 8003398:	2b04      	cmp	r3, #4
 800339a:	d008      	beq.n	80033ae <HAL_TIM_Encoder_Start+0xd2>
 800339c:	e00f      	b.n	80033be <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2201      	movs	r2, #1
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f9ee 	bl	8003788 <TIM_CCxChannelCmd>
      break;
 80033ac:	e016      	b.n	80033dc <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2201      	movs	r2, #1
 80033b4:	2104      	movs	r1, #4
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f9e6 	bl	8003788 <TIM_CCxChannelCmd>
      break;
 80033bc:	e00e      	b.n	80033dc <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f9de 	bl	8003788 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2201      	movs	r2, #1
 80033d2:	2104      	movs	r1, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f9d7 	bl	8003788 <TIM_CCxChannelCmd>
      break;
 80033da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d122      	bne.n	8003452 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d11b      	bne.n	8003452 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0202 	mvn.w	r2, #2
 8003422:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f90f 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 800343e:	e005      	b.n	800344c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f901 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f912 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d122      	bne.n	80034a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d11b      	bne.n	80034a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f06f 0204 	mvn.w	r2, #4
 8003476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8e5 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 8003492:	e005      	b.n	80034a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8d7 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8e8 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d122      	bne.n	80034fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d11b      	bne.n	80034fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f06f 0208 	mvn.w	r2, #8
 80034ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2204      	movs	r2, #4
 80034d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8bb 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 80034e6:	e005      	b.n	80034f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8ad 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8be 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b10      	cmp	r3, #16
 8003506:	d122      	bne.n	800354e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	d11b      	bne.n	800354e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f06f 0210 	mvn.w	r2, #16
 800351e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2208      	movs	r2, #8
 8003524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f891 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 800353a:	e005      	b.n	8003548 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f883 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f894 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10e      	bne.n	800357a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f06f 0201 	mvn.w	r2, #1
 8003572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f85d 	bl	8003634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d10e      	bne.n	80035a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d107      	bne.n	80035a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800359e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f98f 	bl	80038c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f982 	bl	80038d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f842 	bl	8003684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d10e      	bne.n	800362c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d107      	bne.n	800362c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0220 	mvn.w	r2, #32
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f942 	bl	80038b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a32      	ldr	r2, [pc, #200]	; (8003774 <TIM_Base_SetConfig+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_Base_SetConfig+0x28>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d003      	beq.n	80036c0 <TIM_Base_SetConfig+0x28>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <TIM_Base_SetConfig+0xe0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <TIM_Base_SetConfig+0xdc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <TIM_Base_SetConfig+0x6a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d00f      	beq.n	8003702 <TIM_Base_SetConfig+0x6a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a24      	ldr	r2, [pc, #144]	; (8003778 <TIM_Base_SetConfig+0xe0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0x6a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <TIM_Base_SetConfig+0xe4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0x6a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <TIM_Base_SetConfig+0xe8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0x6a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a21      	ldr	r2, [pc, #132]	; (8003784 <TIM_Base_SetConfig+0xec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <TIM_Base_SetConfig+0xdc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0xc0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <TIM_Base_SetConfig+0xe4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0xc0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <TIM_Base_SetConfig+0xe8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0xc0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <TIM_Base_SetConfig+0xec>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40014000 	.word	0x40014000
 8003780:	40014400 	.word	0x40014400
 8003784:	40014800 	.word	0x40014800

08003788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2201      	movs	r2, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e054      	b.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800381c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003854:	d009      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a11      	ldr	r2, [pc, #68]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10c      	bne.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4313      	orrs	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40014000 	.word	0x40014000

080038b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e040      	b.n	8003980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd f8de 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8c0 	bl	8003ab0 <UART_SetConfig>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e022      	b.n	8003980 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9ec 	bl	8003d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fa73 	bl	8003e64 <UART_CheckIdleState>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399c:	2b20      	cmp	r3, #32
 800399e:	f040 8082 	bne.w	8003aa6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_UART_Transmit+0x26>
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e07a      	b.n	8003aa8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Transmit+0x38>
 80039bc:	2302      	movs	r3, #2
 80039be:	e073      	b.n	8003aa8 <HAL_UART_Transmit+0x120>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2221      	movs	r2, #33	; 0x21
 80039d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d6:	f7fd fb9b 	bl	8001110 <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f4:	d108      	bne.n	8003a08 <HAL_UART_Transmit+0x80>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e003      	b.n	8003a10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a18:	e02d      	b.n	8003a76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2180      	movs	r1, #128	; 0x80
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fa66 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e039      	b.n	8003aa8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a46:	b292      	uxth	r2, r2
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e008      	b.n	8003a64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1cb      	bne.n	8003a1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2140      	movs	r1, #64	; 0x40
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fa32 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e005      	b.n	8003aa8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b8b      	ldr	r3, [pc, #556]	; (8003d08 <UART_SetConfig+0x258>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	6979      	ldr	r1, [r7, #20]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a79      	ldr	r2, [pc, #484]	; (8003d0c <UART_SetConfig+0x25c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d121      	bne.n	8003b70 <UART_SetConfig+0xc0>
 8003b2c:	4b78      	ldr	r3, [pc, #480]	; (8003d10 <UART_SetConfig+0x260>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d817      	bhi.n	8003b68 <UART_SetConfig+0xb8>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <UART_SetConfig+0x90>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b51 	.word	0x08003b51
 8003b44:	08003b5d 	.word	0x08003b5d
 8003b48:	08003b63 	.word	0x08003b63
 8003b4c:	08003b57 	.word	0x08003b57
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e01e      	b.n	8003b94 <UART_SetConfig+0xe4>
 8003b56:	2302      	movs	r3, #2
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e01b      	b.n	8003b94 <UART_SetConfig+0xe4>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e018      	b.n	8003b94 <UART_SetConfig+0xe4>
 8003b62:	2308      	movs	r3, #8
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e015      	b.n	8003b94 <UART_SetConfig+0xe4>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	bf00      	nop
 8003b6e:	e011      	b.n	8003b94 <UART_SetConfig+0xe4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <UART_SetConfig+0x264>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d102      	bne.n	8003b80 <UART_SetConfig+0xd0>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e009      	b.n	8003b94 <UART_SetConfig+0xe4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a64      	ldr	r2, [pc, #400]	; (8003d18 <UART_SetConfig+0x268>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d102      	bne.n	8003b90 <UART_SetConfig+0xe0>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e001      	b.n	8003b94 <UART_SetConfig+0xe4>
 8003b90:	2310      	movs	r3, #16
 8003b92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9c:	d15c      	bne.n	8003c58 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003b9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d828      	bhi.n	8003bf6 <UART_SetConfig+0x146>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <UART_SetConfig+0xfc>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bd9 	.word	0x08003bd9
 8003bb4:	08003be1 	.word	0x08003be1
 8003bb8:	08003bf7 	.word	0x08003bf7
 8003bbc:	08003be7 	.word	0x08003be7
 8003bc0:	08003bf7 	.word	0x08003bf7
 8003bc4:	08003bf7 	.word	0x08003bf7
 8003bc8:	08003bf7 	.word	0x08003bf7
 8003bcc:	08003bef 	.word	0x08003bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f7ff f8c0 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	61b8      	str	r0, [r7, #24]
        break;
 8003bd6:	e013      	b.n	8003c00 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7ff f8de 	bl	8002d98 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	61b8      	str	r0, [r7, #24]
        break;
 8003bde:	e00f      	b.n	8003c00 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be0:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <UART_SetConfig+0x26c>)
 8003be2:	61bb      	str	r3, [r7, #24]
        break;
 8003be4:	e00c      	b.n	8003c00 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be6:	f7ff f83f 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003bea:	61b8      	str	r0, [r7, #24]
        break;
 8003bec:	e008      	b.n	8003c00 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	61bb      	str	r3, [r7, #24]
        break;
 8003bf4:	e004      	b.n	8003c00 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	77bb      	strb	r3, [r7, #30]
        break;
 8003bfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d074      	beq.n	8003cf0 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	005a      	lsls	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d916      	bls.n	8003c52 <UART_SetConfig+0x1a2>
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d212      	bcs.n	8003c52 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	89fb      	ldrh	r3, [r7, #14]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	89fa      	ldrh	r2, [r7, #14]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e04e      	b.n	8003cf0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	77bb      	strb	r3, [r7, #30]
 8003c56:	e04b      	b.n	8003cf0 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c58:	7ffb      	ldrb	r3, [r7, #31]
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d827      	bhi.n	8003cae <UART_SetConfig+0x1fe>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x1b4>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003c9f 	.word	0x08003c9f
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003caf 	.word	0x08003caf
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003ca7 	.word	0x08003ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7ff f864 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	61b8      	str	r0, [r7, #24]
        break;
 8003c8e:	e013      	b.n	8003cb8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7ff f882 	bl	8002d98 <HAL_RCC_GetPCLK2Freq>
 8003c94:	61b8      	str	r0, [r7, #24]
        break;
 8003c96:	e00f      	b.n	8003cb8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <UART_SetConfig+0x26c>)
 8003c9a:	61bb      	str	r3, [r7, #24]
        break;
 8003c9c:	e00c      	b.n	8003cb8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7fe ffe3 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003ca2:	61b8      	str	r0, [r7, #24]
        break;
 8003ca4:	e008      	b.n	8003cb8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	e004      	b.n	8003cb8 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003cb6:	bf00      	nop
    }

    if (pclk != 0U)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d018      	beq.n	8003cf0 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085a      	lsrs	r2, r3, #1
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	441a      	add	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d908      	bls.n	8003cec <UART_SetConfig+0x23c>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d204      	bcs.n	8003cec <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e001      	b.n	8003cf0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	efff69f3 	.word	0xefff69f3
 8003d0c:	40013800 	.word	0x40013800
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40004400 	.word	0x40004400
 8003d18:	40004800 	.word	0x40004800
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01a      	beq.n	8003e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1e:	d10a      	bne.n	8003e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
  }
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e74:	f7fd f94c 	bl	8001110 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d10e      	bne.n	8003ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f82d 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e023      	b.n	8003eee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d10e      	bne.n	8003ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f817 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e00d      	b.n	8003eee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	e05e      	b.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d05a      	beq.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fd f8fe 	bl	8001110 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11b      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e043      	b.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d02c      	beq.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7a:	d124      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e00f      	b.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d091      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <__libc_init_array>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	4e0d      	ldr	r6, [pc, #52]	; (8004028 <__libc_init_array+0x38>)
 8003ff4:	4c0d      	ldr	r4, [pc, #52]	; (800402c <__libc_init_array+0x3c>)
 8003ff6:	1ba4      	subs	r4, r4, r6
 8003ff8:	10a4      	asrs	r4, r4, #2
 8003ffa:	2500      	movs	r5, #0
 8003ffc:	42a5      	cmp	r5, r4
 8003ffe:	d109      	bne.n	8004014 <__libc_init_array+0x24>
 8004000:	4e0b      	ldr	r6, [pc, #44]	; (8004030 <__libc_init_array+0x40>)
 8004002:	4c0c      	ldr	r4, [pc, #48]	; (8004034 <__libc_init_array+0x44>)
 8004004:	f000 f820 	bl	8004048 <_init>
 8004008:	1ba4      	subs	r4, r4, r6
 800400a:	10a4      	asrs	r4, r4, #2
 800400c:	2500      	movs	r5, #0
 800400e:	42a5      	cmp	r5, r4
 8004010:	d105      	bne.n	800401e <__libc_init_array+0x2e>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004018:	4798      	blx	r3
 800401a:	3501      	adds	r5, #1
 800401c:	e7ee      	b.n	8003ffc <__libc_init_array+0xc>
 800401e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004022:	4798      	blx	r3
 8004024:	3501      	adds	r5, #1
 8004026:	e7f2      	b.n	800400e <__libc_init_array+0x1e>
 8004028:	080040ac 	.word	0x080040ac
 800402c:	080040ac 	.word	0x080040ac
 8004030:	080040ac 	.word	0x080040ac
 8004034:	080040b0 	.word	0x080040b0

08004038 <memset>:
 8004038:	4402      	add	r2, r0
 800403a:	4603      	mov	r3, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	f803 1b01 	strb.w	r1, [r3], #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <_init>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr

08004054 <_fini>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr
